<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>程序员修炼 on Tacey</title>
    <link>https://taceywong.github.io/tags/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BF%AE%E7%82%BC/</link>
    <description>Recent content in 程序员修炼 on Tacey</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 03 Apr 2016 14:35:11 +0800</lastBuildDate>
    
	<atom:link href="https://taceywong.github.io/tags/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BF%AE%E7%82%BC/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>《程序员修炼之道》备忘清单</title>
      <link>https://taceywong.github.io/post/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93%E5%A4%87%E5%BF%98%E6%B8%85%E5%8D%95/</link>
      <pubDate>Sun, 03 Apr 2016 14:35:11 +0800</pubDate>
      
      <guid>https://taceywong.github.io/post/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93%E5%A4%87%E5%BF%98%E6%B8%85%E5%8D%95/</guid>
      <description>1、关心你的技艺 如果你不在乎能否开发出漂亮的软件，你又何必要耗费生命去开发软件呢？
2、思考！你的工作 关掉自动驾驶仪，接管操作。不断的批评和评估你的工作
3、提供各种选择，不要找蹩脚的接借口 要提供各种选择，而不是找借口。不要说事情做不到，说明能够做什么
4、不要容忍破窗户 当你看到糟糕的设计、错误的决策和糟糕的代码时，修正他们
5、做变化的催化剂 你不能强迫别人改变。相反，要向他们展示未来会怎样，并帮助他们参与对未来的创造
6、记住大图景 不要太过专注于细节，以致忘了查看你周围正在发生什么
7、使质量成为需求问题 让你的用户参与确定项目真正的质量需求
8、定期为你的知识资产投资 让学习成为习惯
9、批判地分析你读到的和听到的 不要被供应商、媒体炒作、或教条左右。要依照你自己的看法和你的项目的情况去对信息进行分析
10、你说什么和你怎么说同样重要 如果你不能有效地向别人传递你的了不起的想法，这些想法就毫无用处
11、不要重复你自己 系统中的每一项知识都必须具有单一、无歧义、权威的表示
12、让复用变得容易 如果复用很容易，人们就会去复用。创造一个支持复用的环境
13、消除无关事物之间的影响 设计自足、独立、并具有单一、良好定义的目的的组件
14、不存在最终决策 没有决策是浇筑在石头上的。相反，要把每项决策都视为是写在沙滩上的，并未变化做好计划
15、用曳光弹找到目标 曳光弹能通过实验各种事物并检查他们离目标有多远来让你追踪目标
16、为了学习而制作原型 原型制作是一种学习经验。其价值并不在于你所产生的胆码，而在于所学的经验教训
17、靠近问题领域变成 用你的用户的语言进行设计和编码
18、估算，以避免发生意外 在着手之前先进行估算。你讲提前发现潜在的问题
19、通过代码对进度表示迭代 用你在进行实现时获得的经验提炼项目的时间标度
20、用纯文本保存知识 纯文本不会过时。他能够帮你有效利用你的工作，并简化调试和测试
21、利用命令shell的力量 当图形用户界面无能为力的时候使用shell
22、用好一种编辑器 编辑器应该是你手的延伸；确保你的编辑器是可配置、可扩展、可编程的
23、总是使用源码控制 远吗控制是你的工作的时间机器——你能够回到过去
24、要修正问题，而不是发出指责 BUG是你的过错还是别人的过错，并不是真的很有关系——它仍然是你的问题，它仍然需要修正
25、不要恐慌 做一次深呼吸，思考什么可能是BUG的原因
26、Select没有问题 在操作系统或编译器、甚或是第三方产品或库中很少发现bug。bug很可能在应用中。
27、不要假定，要证明 在实际环境中——使用真正的数据和边界条件——证明你的假定
28、学习一种文本操纵语言 你用每天用很长的时间处理文本，为什么不让计算机替代你完成部分工作呢？
29、编写能编写代码的代码 代码生成器能提高你的生产率，并有助于避免重复
30、你不可能写出完美的软件 软件不可能完美。保护你的代码和用户，使它们能免于能够遇见的错误
31、通过合约进行设计 使用合约建立文档，并检验代码所做的事情正好是它声明要做的
32、早崩溃 死程序造成的危害通常比有问题的程序要小的多
33、用断言避免不可能发生的事情 断言验证你的各种假定。在一个不确定的世界里，用断言保护你的代码
34、将异常用于异常的问题 x
35、要有始有终 只要可能，分配某资源的历程或对象也应该负责解除其分配</description>
    </item>
    
  </channel>
</rss>